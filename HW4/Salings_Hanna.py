#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Apr 12 02:08:56 2018

Template for Bioinformatics pa04.

TASK 1 (70% of your grade):
* You should implement the below class.
* Its purpose is to wrap whatever learning method you choose (library or from-scratch).
* You will train and test on the data files listed in the grader (and posted on the site).

TASK 2 (30% of your grade):
* Read the pdf publication on the website
* Summarize it in 400 words here in this comment header (immediately following):
    
        This study focuses on examining the expression profiles of serum miRNA to identify circulating
    miRNA that can detect breast cancer in its early stages. This helps solve the problem of many
    people avoiding breast cancer screenings because of assumptions that mammography is painful and 
    having to take time out of their schedule to visit a clinic for the screening. The clinical samples 
    of the study were taken from patients that had breast cancer and other patients that had benign breast 
    diseases.
        For the statistical analysis, the miRNA expression profiles were compared between patients with breast
    cancer and patients with other clinical conditions. Beforehand, the samples were divided into a training and
    test cohort. In the training cohort, Fisher's linear discriminant analysis was used to calculate the diagnostic 
    sensitivity, specificity, and accuracy for each miRNA marker or miRNA markers combinations.
        While examining the discrimination performance of the diagnostic index, they checked if there were age-dependent
    or sex-dependent effects present in the discrimination of the test cohort on the non-cancer controls. It was found 
    that there was no notable difference between male and female controls; however, the discrimination performance 
    showed that it increased with age. A problem found with the developed diagnostic index is that it was unable to
    distinguish between benign breast diseases and breast cancer.
        It was found that serum miR-1246 was overexpressed in breast cancer patients by over twofold. The expression of 
    it in the non-cancer controls was close to the background expression; therefore, miR-1246 may be an importanct breast 
    cancer marker since the predicted target genes were part of the ErbB and mTOR pathways, both of which have important 
    roles in the pathogenesis and progression of breast cancer. It is thought that breast cancer cells might actively 
    produce miR-1246, which might inhibit the signaling pathways utilized by cancers. The other four miRNA were found to 
    not have any biological pathways, but it is possible that this is because the four miRNA have not been completely analyzed 
    yet, and miRPath uses miRBase release 18, which two of the other four miRNA are not registed in. Overall, the diagnostic 
    index uses a combination of miR-1246, miR-1307-3p, miR-4634, miR-6861-5p, and miR-6875-5p measured from serum, and can 
    detect breast cancer while in its early stages. It can also differentiate breast cancer from other cancers such as 
    pancreas/biliary tract/prostrate benign diseases, and more.


@author: hks539@mst.edu
"""

import numpy as np
# You can import anything else standard python, or that we have been using in class
import pandas as pd
from sklearn.neighbors import KNeighborsClassifier

class my_class_learning_wrapper():
    '''
    My learner: Uses the k-NN classification to train and test the given dataset
    '''

    def __init__(self):
        print('Initializing k-NN classifier')

    def from_scratch(self):
        '''
        Hard-code this return value (honestly; I will check):
            1 if you chose to implement the algorithm from scratch,
            0 if not
        '''
        return 0

    def train(self, filename):
        '''
        This should input the train*.csv file, clean, format, and train your model
        '''
        train_input = pd.read_csv(filename) # take in the given file
        
        train = train_input.drop('breast cancer', axis=1) # remove last column from train variable
        target = train_input['breast cancer'] # make the target variable just the last column of the dataset
        
        knn = KNeighborsClassifier() # initialize the k-NN classifier
        knn.fit(train, target) # fit the train and target data
        
        #print('Accuracy of KNN n-5, on the training set: {:.3f}'.format(knn.score(train, target)))
        
        print('\nTraining on the data passed in from', filename)

    def test(self, filename):
        '''
        This should take in the test*.csv file, clean, format, etc.
        It should return an np.array with the predicted classes
        generated by whatever model you choose to implement or use.
        '''
        test_input = pd.read_csv(filename) # take in the given file
        
        test = test_input.drop('breast cancer', axis=1) # remove last column from test variable
        test_target = test_input['breast cancer'] # make the test_target variable just the last column of the dataset
        
        knn = KNeighborsClassifier() # initialize the k-NN classifier
        knn.fit(test, test_target) # fit the test and test_target data
        
        #print('Accuracy of KNN n-5, on the test set: {:.3f}'.format(knn.score(test, test_target)))
        
        predictions = knn.predict(test)

        print('\nPredicting the class for each sample (cancer=1; benign=0) from',
              filename)

        return np.array(predictions)

    #def helper_func_whatever():
    #    print('\nFor example, if you want to have cleaning and import as their own function')
